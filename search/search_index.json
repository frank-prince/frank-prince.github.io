{"config":{"lang":["en","ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"ABOUT/","title":"About","text":"<ul> <li>\u7f51\u7ad9\u5efa\u4e8e2023\u5e747\u67082\u65e5\uff1b</li> <li>\u611f\u8c22Material for MkDocs\u3001GitHub Pages\u7b49\u56e2\u961f\u63d0\u4f9b\u7684\u5de5\u5177\uff1b</li> <li>\u611f\u8c22THU\u6768\u5e0c\u6770\u540c\u5b66\u7684\u89c6\u9891\uff1aGitHub Pages \u4e2a\u4eba\u7f51\u7ad9\u6784\u5efa\u4e0e\u53d1\u5e03;</li> </ul>"},{"location":"CS/","title":"Computer Science","text":"<p>\u6b64\u5904\u7528\u6765\u5b58\u653eCS\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"CS/Language/C/final-exam-re/","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840-\u671f\u672b\u5f00\u5377\u8d44\u6599\u6574\u7406","text":""},{"location":"CS/Language/C/final-exam-re/#escape-char","title":"Escape Char/\u9003\u9038\u5b57\u7b26","text":"char meaning <code>\\b</code> back position/\u56de\u9000 <code>\\t</code> next table stop/\u5236\u8868 <code>\\\"</code> double quote/\u53cc\u5f15\u53f7 <code>\\'</code> single quote/\u5355\u5f15\u53f7 <code>\\n</code> new line/\u6362\u884c <code>\\r</code> return the carriage/\u56de\u8f66"},{"location":"CS/Language/C/final-exam-re/#code","title":"Code/\u5e38\u7528\u4ee3\u7801","text":""},{"location":"CS/Language/C/final-exam-re/#gcdeuclids","title":"GCD\uff08Euclid's\uff09/\u6700\u5927\u516c\u7ea6\u6570","text":"<p>Loop:</p> <pre><code>while(1)\n{\n    int r=a%b;\n    a=b;\n    b=r;\n}\n</code></pre> <p>Recursion:</p> <pre><code>int gcd(int x,int y)\n{\n    if(y==0)\n        return x;\n    return gcd(y,x%y);\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#yang-hui-triangle","title":"Yang Hui Triangle/\u6768\u8f89\u4e09\u89d2","text":"<pre><code>int main(void)\n{\n    int n;\n    scanf(\"%d\",&amp;n);\n    for(int i=0;i&lt;=n;i++)\n    {\n        for(int j=0;j&lt;=i;j++)\n        {\n            printf(\"%9d\",Yang(i,j));\n        }\n        printf(\"\\n\");\n    }\n}\n\nint Yang (int a,int b)\n{\n    if(b==a||b==0)\n        return 1;\n    else\n        return Yang(a-1,b-1)+Yang(a-1,b);\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#hanoi","title":"Hanoi/\u9012\u5f52\u6c49\u8bfa\u5854","text":"<pre><code>int main(void)\n{\n    char a, b, c;\n    int n;\n    scanf(\"%d %c %c %c\", &amp;n, &amp;a, &amp;b, &amp;c);\n    func(n, a, b, c);\n    return 0;\n}\n\nvoid func(int n, char first, char target, char pro)\n{\n    if (n &gt; 0)\n    {\n        func(n - 1, first, pro, target); \n        printf(\"%d: %c -&gt; %c\\n\", n, first, target);\n        func(n - 1, pro, target, first);\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#quick-power","title":"Quick Power/\u5feb\u901f\u5e42\u8ba1\u7b97","text":"<p>Loop:</p> <pre><code>int power(int x, int n)\n{\n    int res=1;// \u7ed3\u679c\u4ece1\u5f00\u59cb\n    while(n)\n    {\n        if(n%2)// \u6700\u540e\u4e00\u4f4d\u4e3a1\uff0c\u5c31\u9700\u8981\u628a\u5f53\u524d\u7684\u5e42\u4e58\u5230\u7ed3\u679c\u4e2d\n        {\n            res*=x;\n        }\n        x*=x;// \u4e00\u76f4\u7d2f\u4e58\n        n/=2;// \u53bb\u6389\u6700\u540e\u4e00\u4f4d\n    }\n}\n</code></pre> <p>Recursion:</p> <pre><code>int power(int x, int n)\n{\n    if(n==0)\n        return 1;\n    else if(n%2==1)\n        return x*power(x,n-1);\n    else\n    {\n        int t=power(x,n/2);\n        return t*t;\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#least-prefix-hash","title":"Least Prefix/\u6700\u5c0f\u7f16\u53f7--\u7b80\u6613Hash","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int hash[100000]={0};// create hash array\n    int n;\n    scanf(\"%d\",&amp;n);\n    int a[n];\n\n    for(int i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;a[i]);// record the number\n    }\n\n    int res;// least prefix\n    for(int i=0;i&lt;n;i++)\n    {\n        if(hash[a[i]]==0)\n        {\n            hash[a[i]]==1;\n            res=i;\n        }\n    }\n\n    printf(\"%d\",res);\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#simple-hash-sorthash","title":"Simple Hash Sort/\u7b80\u6613Hash\u6392\u5e8f","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int hash[100000]={0};\n    int n;\n    scanf(\"%d\",&amp;n);\n\n    for(int i=0;i&lt;n;i++)\n    {\n        int temp;\n        scanf(\"%d\",&amp;temp);\n        hash[temp]++;\n    }\n\n    for(int i=0;i&lt;100000;i++)\n    {\n        if(hash[i])\n        {\n            for(int j=0;j&lt;hash[i];j++)\n            {\n                printf(\"%d \",i);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#stack-operate","title":"Stack Operate/\u6808\u64cd\u4f5c","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int n;\n    int x;\n    scanf(\"%d\",&amp;n);\n    int a[20003]={0};\n    int p=0;\n    int q=0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        scanf(\"%d\",&amp;x);\n        if(x==1)\n        {\n            scanf(\"%d\",&amp;a[++p]);\n            q=p;\n        }\n        if(x==0)\n        {\n            if(p==0)\n                printf(\"invalid\\n\");\n            else\n                printf(\"%d\\n\",a[p--]);\n        }\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#queue-operate","title":"Queue Operate/\u961f\u5217\u64cd\u4f5c","text":"<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int n;\n    int x,y,p,q;\n    scanf(\"%d\",&amp;n);\n    int a[20001]={0};\n    p=0;\n    q=0;\n    for (int i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;x);\n        if(x==1)\n        {\n            scanf(\"%d\",&amp;y);\n            a[p++]=y;\n        }\n        else \n        {\n            if(p==q)\n                printf(\"invalid\\n\");\n            if(p!=q)\n                printf(\"%d\\n\",a[q++]);\n        }\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#valid-stack","title":"Valid Stack/\u6709\u6548\u6808\u5e8f\u5217","text":"<pre><code>for(int i=0;i&lt;n;i++)\n{\n    if(a[i]&gt;m+i)// m\u4e3a\u6808\u5bb9\u91cf\n        index=0;\n}\n\nfor(int i=0;i&lt;n-2;i++)\n{\n    if(a[i]&gt;a[i+2]&amp;&amp;a[i+2]&gt;a[i+1])\n        index=0;\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#binary-search","title":"Binary Search/\u4e8c\u5206\u641c\u7d22","text":"<pre><code>int search(int key, int a[], int begin, int end)\n{\n    int ret=-1;\n    if(begin&lt;end)\n    {\n        int mid=(begin+end)/2;\n        if(key&lt;a[mid])\n            ret=search(key, a, begin, mid-1);\n        else if(key&gt;a[mid])\n            ret=search(key, a, mid+1, end);\n        else\n            ret=mid;\n    }\n    else\n        printf(\"FAILED\\n\");\n    return ret;\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#selection-sort","title":"Selection Sort/\u9009\u62e9\u6392\u5e8f","text":"<pre><code>void selection_sort(int a[], int n)\n{\n    for(int i=0;i&lt;n-1;i++)\n    {\n        int index=i;\n        for(int j=i;j&lt;n;j++)\n        {\n            if(a[index]&gt;a[j])\n                index=j;\n        }\n        int temp=a[index];\n        a[index]=a[i];\n        a[i]=temp;\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#bubble-sort","title":"Bubble Sort/\u5192\u6ce1\u6392\u5e8f","text":"<pre><code>void bubble_sort(int a[], int n)\n{\n    for(int i=n-1;i&gt;0;i--)\n    {\n        for(int j=0;j&lt;i;j++)\n        {\n            if(a[j]&gt;a[j+1])\n            {\n                int temp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=temp;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#insertion-sort","title":"Insertion Sort/\u63d2\u5165\u6392\u5e8f","text":"<pre><code>void insertionSort(int arr[], int n)\n{\n    for(int i=1;i&lt;n;i++)\n    {\n        int ele=arr[i];\n        int j=i-1;\n        while(j&gt;=0&amp;&amp;ele&lt;arr[j])\n        {\n            arr[j+1]=arr[j];\n            j--;\n            arr[j+1]=ele;\n        }\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#merge-sort","title":"Merge Sort/\u5f52\u5e76\u6392\u5e8f","text":"<pre><code>void MergeSort(int a[], int lo, int hi)\n{\n    int md;\n    if (lo &lt; hi)\n    {\n        md = (lo + hi) / 2;\n        MergeSort(a, lo, md);\n        MergeSort(a, md + 1, hi);\n        merge(a, lo, md, hi);\n    }\n}\n\nvoid merge(int a[], int lo, int md, int hi)\n{\n    int i = lo, j = md + 1, k = lo;\n    int b[MAXN + 3];\n\n    while (k &lt; hi)\n    {\n        if (i &lt;= md &amp;&amp; j &lt;= hi)\n        {\n            if (a[i] &lt;= a[j])\n                b[k++] = a[i++];\n            else\n                b[k++] = a[j++];\n        }\n        else\n            break;\n    }\n\n    while (i &lt;= md)\n        b[k++] = a[i++];\n    while (j &lt;= hi)\n        b[k++] = a[j++];\n\n    for (k = lo; k &lt;= hi; k++)\n        a[k] = b[k];\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#quick-sort","title":"Quick Sort/\u5feb\u901f\u6392\u5e8f","text":""},{"location":"CS/Language/C/final-exam-re/#lomuto","title":"Lomuto","text":"<pre><code>void quicksort_lomuto(int a[], int low, int high)\n{\n    int pivot;\n    if(low&lt;high)\n    {\n        pivot=partition(a, low, high);\n        quicksort_lomuto(a, low, pivot-1);\n        quicksort_lomuto(a, pivot+1, high);\n    }\n}\n\nint partition(int a[], int low, int high)\n{\n    int pi=a[high];\n    int i=low;\n    for(int j=low;j&lt;=high;j++)\n    {\n        if(a[j]&lt;pi)\n        {\n            int t=a[i];\n            a[i]=a[j];\n            a[j]=t;\n            i++;\n        }\n    }\n    int k=a[i];\n    a[i]=a[high];\n    a[high]=k;\n\n    return i;\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#hoare","title":"Hoare","text":"<pre><code>void quicksort_hoare(int a[], int low, int high)\n{\n    int pivot;\n    if(low&lt;high)\n    {\n        pivot=partition(a, low, high);\n        quicksort_hoare(a, low, pivot-1);\n        quicksort_hoare(a, pivot+1, high);\n    }\n}\n\nint partition(int a[], int low, int high)\n{\n    int pi=a[low+(high-low)/2];\n    int i=low-1;\n    int j=high+1;\n    while(1)\n    {\n        do{\n            i++;\n        }while(a[i]&lt;pi);\n        do{\n            j--;\n        }while(a[j]&gt;pi);\n\n        if(i&lt;=j)\n            return j;\n        int t=a[i];\n        a[i]=a[j];\n        a[j]=t;\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#qsort","title":"qsort","text":"<pre><code>#include &lt;stdlib.h&gt;\nvoid qsort(void *base, size_t nel, size_t width, int (*compar) (const void *, const void *));\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#stringhc","title":"string.h/C\u8bed\u8a00\u5e93\u5b57\u7b26\u4e32\u51fd\u6570","text":"<pre><code>#include &lt;string.h&gt;\n\nsize_t strlen(const char *s);\nint strcmp(const char *s1, const char *s2);\nchar *strcpy(char *restrict dst, const char *restrict src);\nchar *strcat(char *restrict s1, const char *restrict s2);\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#linked-list","title":"Linked List/\u94fe\u8868\u5e38\u7528\u64cd\u4f5c","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct _node\n{\n    int value;\n    struct _node *next;\n} Node;\n\ntypedef struct\n{\n    Node *head;\n    Node *tail;\n} List;\n\nList list_create()\n{\n    List list = {NULL, NULL};\n    return list;\n}\n\nvoid list_free(List *list)\n{\n    for(Node *p=list-&gt;head;p;)\n    {\n        Node *q=p-&gt;next;\n        free(p);\n        p=q;\n    }\n    list-&gt;head=list-&gt;tail=NULL;\n}\n\nvoid list_append(List *list, int v)\n{\n    Node *p = (Node *)malloc(sizeof(Node));\n    p-&gt;value = v;\n    p-&gt;next = NULL;\n    if (list-&gt;tail)\n    {\n        list-&gt;tail-&gt;next = p;\n        list-&gt;tail = p;\n    }\n    else\n    {\n        list-&gt;head = list-&gt;tail = p;\n    }\n}\n\nvoid list_insert(List *list, int v)\n{\n    Node *p = (Node *)malloc(sizeof(Node));\n    p-&gt;value = v;\n    p-&gt;next = list-&gt;head;\n    list-&gt;head = p;\n    if (list-&gt;tail == NULL)\n    {\n        list-&gt;tail = p;\n    }\n}\n\nint list_find(List *list, int v)\n{\n    int cnt = 0;\n    Node *p = list-&gt;head;\n    while (p)\n    {\n        if (p-&gt;value == v)\n        {\n            return cnt;\n        }\n        cnt++;\n        p = p-&gt;next;\n    }\n    return -1;\n}\n\nvoid list_remove(List *list, int v)\n{\n    for (Node *p = list-&gt;head, *q = NULL; p;)\n    {\n        if (p-&gt;value == v)\n        {\n            Node *r = p-&gt;next;\n            if (q)\n            {\n                q-&gt;next = p-&gt;next;\n            }\n            else\n            {\n                list-&gt;head = p-&gt;next;\n            }\n            if (p == list-&gt;tail)\n            {\n                list-&gt;tail = q;\n            }\n            free(p);\n            p = r;\n        }\n        else\n        {\n            q = p;\n            p = p-&gt;next;\n        }\n    }\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#mystr","title":"mystr/\u81ea\u5236\u5b57\u7b26\u4e32\u51fd\u6570","text":"<pre><code>int mylen(const char *s)\n{\n    int cnt=0;\n    while(s[cnt])\n    {\n        cnt++;\n    }\n    return cnt;\n}\n\nint mycmp(const char *s1, const char *s2)\n{\n    while( *s1==*s2 &amp;&amp; *s1!='\\0' )\n    {\n        s1++;\n        s2++;\n    }\n    return *s1-*s2;\n}\n\nchar *mycpy(char *restrict dst, const char *restrict src)\n{\n    int idx=0;\n    while(src[idx])\n    {\n        dst[idx++]=src[idx++];\n    }\n    dst[idx]='\\0';\n    return dst;\n}\n\nchar *mycat(char *restrict s1, const char *restrict s2)\n{\n    //\u8c03\u7528mycpy\u5373\u53ef\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#_1","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()\n{\n    char a[101],b[101],res[101];\n    scanf(\"%s\",a);\n    scanf(\"%s\",b);\n    int len=strlen(a)&gt;strlen(b)?  strlen(a):strlen(b);\n    int up=0;\n\n    for(int i=0;i&lt;len;i++)\n    {\n        int aelem,belem;\n        if(i&lt;strlen(a))\n            aelem=a[strlen(a)-i-1]-'0';\n        else\n            aelem=0;\n\n        if(i&lt;strlen(b))\n            belem=b[strlen(b)-i-1]-'0';\n        else\n            belem=0;\n\n        int add=aelem+belem;\n\n        res[i]=add%10+up;\n        up=add/10;\n    }\n\n    if(up)\n        printf(\"1\");\n    for(int i=len-1;i&gt;=0;i--)\n        printf(\"%d\",res[i]);\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#quick-powermod","title":"Quick Power(MOD)","text":"<pre><code>int Power(int N, int k)\n{\n    N%=MOD;\n    int res=1;\n    while(k)\n    {\n        if(k%2)\n        {\n            res*=N;\n            res%=MOD;\n        }\n        N*=N;\n        N%=MOD;\n        k/=2;\n    }\n    return res;\n}\n</code></pre>"},{"location":"CS/Language/C/final-exam-re/#_2","title":"\u53cc\u5934\u53cc\u5411\u94fe\u8868","text":"<pre><code>typedef struct _Node {\n    int value;\n    struct _Node *next;\n    struct _Node *prev;\n} Node;\n\ntypedef struct {\n    Node *head;\n    Node *tail;\n} List;\n\nvoid list_print(List *list)\n{\n    for ( Node *p = list-&gt;head; p; p=p-&gt;next ) {\n        printf(\"%d \", p-&gt;value);\n    }\n    printf(\"\\n\");\n}\n\nvoid list_clear(List *list)\n{\n    for ( Node *p = list-&gt;head, *q; p; p=q ) {\n        q = p-&gt;next;\n        free(p);\n    }\n}\n\nvoid list_append(List *list, int value)\n{\n    Node *p = (Node *)malloc(sizeof(Node));\n    p-&gt;value = value;\n    if (list-&gt;tail)\n    {\n        p-&gt;prev = list-&gt;tail;\n        list-&gt;tail-&gt;next = p;\n        list-&gt;tail = p;\n        p-&gt;next = NULL;\n    }\n    else\n    {\n        list-&gt;tail = list-&gt;head = p;\n        p-&gt;next = p-&gt;prev = NULL;\n    }\n}\n\nvoid list_remove(List *list, int value)\n{\n    for (Node *p = list-&gt;head; p;)\n    {\n        if (p-&gt;value == value)\n        {\n            Node *n = p-&gt;next;\n            if (p-&gt;prev)\n                p-&gt;prev-&gt;next = p-&gt;next;\n            else\n                list-&gt;head = p-&gt;next;\n\n            if (p-&gt;next)\n                p-&gt;next-&gt;prev = p-&gt;prev;\n            else\n                list-&gt;tail = p-&gt;prev;\n\n            free(p);\n            p = n;\n        }\n        else\n            p = p-&gt;next;\n    }\n}\n</code></pre>"},{"location":"System/","title":"System","text":"<p>\u6b64\u5904\u7528\u6765\u5b58\u653eSystem\u76f8\u5173\u5185\u5bb9\u3002</p>"},{"location":"System/ICS/0-abstract/","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba\uff08ICS\uff09","text":"<p>\u8bfe\u7a0b\u65f6\u95f4\uff1a23-24\u77ed\u5b66\u671f\uff0c23.7.11-23.7.28</p> <p>\u6388\u8bfe\u6559\u5e08\uff1aProf. Patt, Prof. Jiang</p> <p>\u6b64\u5904\u5b58\u653e\u81ea\u5df1\u7684\u7b14\u8bb0\u3002</p>"},{"location":"System/ICS/1-welcome/","title":"Chapter 1 Welcome Aboard","text":"<p>There is no magic to computing!</p>"},{"location":"System/ICS/1-welcome/#11-two-recurring-themes","title":"1.1 Two Recurring Themes","text":""},{"location":"System/ICS/1-welcome/#111-the-notion-of-abstracion","title":"1.1.1 The Notion of Abstracion","text":"<ul> <li>One should try to keep the level of abstraction as long as possible, consistent with getting everything to work efficiently.</li> <li>There is an underlying assumption to this: when everything about the detail is just fine.</li> </ul>"},{"location":"System/ICS/1-welcome/#112-hardware-vs-software","title":"1.1.2 Hardware vs. Software","text":"<ul> <li>Not separating the notion of hardware and software in your mind is very important.</li> <li>You'll be much more capable if you master both.</li> </ul>"},{"location":"System/ICS/1-welcome/#12-a-computer-system","title":"1.2 A Computer System","text":"<ul> <li>CPU: Processor</li> <li>MEM: Storage and Memory</li> <li>I/O: Input &amp; Output Devices</li> </ul>"},{"location":"System/ICS/1-welcome/#13-two-very-important-ideas","title":"1.3 Two Very Important Ideas","text":"<ol> <li> <p>All computers are capable of computing exactly the same things if they're given enough time and enough memory.</p> </li> <li> <p>It is necessary to transform our problem from the human language to the voltages that influence the flow of electrons.</p> </li> </ol> Problems Algorithms Language Machine(ISA) Architecture Microarchitecture Circuits Devices <p>It's called the level of transformation.</p> <ul> <li>Problem: The statement of the problem shouldn't have ambiguity.</li> <li>Algorithm: A step-by-step procedure that is guaranteed to terminate, such that each step is precisely stated and can be carried out by the computer.(Definiteness, Effective, Finiteness)</li> <li>Program: Two kinds of programming languages: High-level(at a distance from the underlying computer)/Low-level(tied to the computer).</li> <li>ISA: The instruction set architecture is the complete specification of the interface between programs and the underlying computing hardware.(Compiler: Translate from a high-level language to the ISA.)</li> <li>Microarchitecture: Each ISA has many ways to realize for different microarchitectures.</li> </ul>"}]}